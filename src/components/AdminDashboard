import { useState, useEffect } from 'react';
import { Button, Table, Spinner, Alert } from 'react-bootstrap';
import { ethers } from 'ethers';

const AdminDashboard = ({ provider, account, crowdsale }) => {
  const [pendingRequests, setPendingRequests] = useState([]);
  const [whitelist, setWhitelist] = useState([]);
  const [loading, setLoading] = useState(true);
  const [txPending, setTxPending] = useState(false);
  const [error, setError] = useState("");

  useEffect(() => {
    const loadRequests = async () => {
      try {
        setLoading(true);

        // Get past WhitelistRequested events
        const filter = crowdsale.filters.WhitelistRequested();
        const events = await crowdsale.queryFilter(filter);

        // Remove duplicates and keep the latest request per address
        const unique = [...new Map(events.map(e => [e.args.user, e])).values()];
        const requests = unique.map(e => e.args.user);

        setPendingRequests(requests);

        // (Optional) Load current whitelist if you want to show it
        // This assumes you have a method to fetch multiple or hardcoded whitelist addresses
        // You can skip this part for now
      } catch (err) {
        console.error(err);
        setError("Failed to load data from contract.");
      }
      setLoading(false);
    };

    loadRequests();
  }, [crowdsale]);

  const approveRequest = async (address) => {
    try {
      setTxPending(true);
      const signer = await provider.getSigner();
      const tx = await crowdsale.connect(signer).addToWhitelist(address);
      await tx.wait();

      // Refresh the list
      setPendingRequests(pendingRequests.filter(a => a !== address));
    } catch (err) {
      console.error(err);
      window.alert('Transaction failed or rejected.');
    }
    setTxPending(false);
  };

  return (
    <div style={{ maxWidth: '900px', margin: '40px auto' }}>
      <h3>ðŸ›¡ Admin Dashboard: Whitelist Requests</h3>

      {loading ? (
        <Spinner animation="border" />
      ) : (
        <>
          {error && <Alert variant="danger">{error}</Alert>}
          <Table striped bordered hover>
            <thead>
              <tr>
                <th>Address</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
              {pendingRequests.length === 0 ? (
                <tr><td colSpan="2">No pending requests.</td></tr>
              ) : (
                pendingRequests.map((address, idx) => (
                  <tr key={idx}>
                    <td>{address}</td>
                    <td>
                      <Button
                        variant="success"
                        onClick={() => approveRequest(address)}
                        disabled={txPending}
                      >
                        {txPending ? 'Approving...' : 'Approve'}
                      </Button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </Table>
        </>
      )}
    </div>
  );
};

export default AdminDashboard;
